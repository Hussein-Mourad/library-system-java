/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library.system.java;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author hussein
 */
public class LibrarianIssueBookForm extends javax.swing.JFrame {

    private String[][] books = Helpers.readTableData("books.csv");
    private String[][] students = Helpers.readTableData("students.csv");
    private String[][] issuedBooks = Helpers.readTableData("issuedbooks.csv");
    private int issuedBooksCount = issuedBooks.length;
    private String studentName;
    private Date todayDate = new Date();
    private long time = todayDate.getTime() + 14 * 24 * 60 * 60 * 1000; // Adds 14 days to today
    private Date maxAllowedDate = new Date(time);  // Maximum allowed date to return the book
    private SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    /**
     * Creates new form IssueBookForm
     */
    public LibrarianIssueBookForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        callNoLabel = new javax.swing.JLabel();
        callNoTextField = new javax.swing.JTextField();
        issueButton = new javax.swing.JButton();
        studentIdLabel = new javax.swing.JLabel();
        studentIdTextField = new javax.swing.JTextField();
        bookNameLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        contactTextField = new javax.swing.JTextField();
        bookNameTextField = new javax.swing.JTextField();
        returnDateLabel = new javax.swing.JLabel();
        returnDateTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("University Library System");
        setMinimumSize(new java.awt.Dimension(500, 350));
        setResizable(false);
        setSize(new java.awt.Dimension(500, 350));

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        title.setText("Issue a Book");

        callNoLabel.setText("Book Callno:");

        callNoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callNoTextFieldActionPerformed(evt);
            }
        });

        issueButton.setText("Issue");
        issueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueButtonActionPerformed(evt);
            }
        });

        studentIdLabel.setText("Student Id:");

        studentIdTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentIdTextFieldActionPerformed(evt);
            }
        });

        bookNameLabel.setText("Book Name");

        jLabel1.setText("Contact No.");

        contactTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactTextFieldActionPerformed(evt);
            }
        });

        bookNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookNameTextFieldActionPerformed(evt);
            }
        });

        returnDateLabel.setText("Return Data");

        returnDateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnDateTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("(yyyy-mm-dd)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addComponent(title)
                .addContainerGap(190, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(callNoLabel)
                    .addComponent(studentIdLabel)
                    .addComponent(jLabel1)
                    .addComponent(bookNameLabel)
                    .addComponent(returnDateLabel)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(studentIdTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contactTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookNameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(returnDateTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(issueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(callNoTextField))
                .addGap(31, 31, 31))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(callNoLabel)
                    .addComponent(callNoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentIdLabel)
                    .addComponent(studentIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnDateLabel)
                    .addComponent(returnDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(issueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private boolean isValidDate(String returnDate) {
        // Validates date
        try {
            Date formattedReturnDate = new SimpleDateFormat("yyyy-MM-dd").parse(returnDate);
            if (!formattedReturnDate.before(maxAllowedDate)) {
                JOptionPane.showMessageDialog(this, "Invalid Return data max allowed peroid is 14 days", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (!formattedReturnDate.after(todayDate)) {
                JOptionPane.showMessageDialog(this, "Invalid return date", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Invalid date format", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    // Checks that the student data is valid using binary search
    private boolean isValidStudent(String studentId, String contactNo) {
        int first = 0;
        int last = students.length;
        int mid = (first + last) / 2;

        // Handles if student id doesn't exists
        if (Integer.valueOf(studentId) > students.length) {
            return false;
        }

        while (first <= last) {
            String id = students[mid][0].trim();
            String name = students[mid][1].trim();
            String contact = students[mid][6].trim();
            if (Integer.valueOf(id) < Integer.valueOf(studentId)) {
                first = mid + 1;
            } else if (id.equals(studentId) && contact.equals(contactNo)) {
                this.studentName = name;
                return true;

            } else {
                last = mid - 1;
            }
            mid = (first + last) / 2;
        }
        return false;
    }

    // returns -1 if it is not found
    // returns -2 if all books are issued
    // returns the id of the book if it is found
    private int isValidBook(String name, String callNo) {
        for (String[] book : books) {
            Integer bookId = Integer.valueOf(book[0].trim());
            String bookCallNo = book[1].trim();
            String bookName = book[2].trim();
            String bookQuantity = book[5].trim();
            String issuedQuantity = book[6].trim();
            if (bookCallNo.equals(callNo) && bookName.equals(name)) {
                if (issuedQuantity.equals(bookQuantity)) {
                    return -2;
                } else {
                    return bookId - 1;
                }
            }
        }
        return -1;
    }

    private boolean isStudentIssuedThisBook(String id, String callNo) {
        for (String[] book : issuedBooks) {
            String studentId = book[2].trim();
            String bookCallNo = book[1].trim();
            if (bookCallNo.equals(callNo) && studentId.equals(id)) {
                return true;
            }
        }
        return false;
    }

    private boolean canStudentIssue(String studentId) {
        int numberOfIssuedBooks = 0;
        for (String[] book : issuedBooks) {
            if (book[2].equals(studentId)) {
                numberOfIssuedBooks++;
            }
            if (numberOfIssuedBooks == 3) {
                JOptionPane.showMessageDialog(this, "The student issued the maximum number of books", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true;
    }

    private void issueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueButtonActionPerformed
        final String comma = ",";
        final String callNo = this.callNoTextField.getText().trim();
        final String studentId = this.studentIdTextField.getText().trim();
        final String contactNo = this.contactTextField.getText().trim();
        final String bookName = this.bookNameTextField.getText().trim();
        final String returnDate = this.returnDateTextField.getText().trim();

        if (callNo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter book call no");
        } else if (studentId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter student id");
        } else if (contactNo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter contact number");
        } else if (bookName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter book name");
        } else if (returnDate.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a return date");
        } else if (!Helpers.isNumeric(studentId)) {
            JOptionPane.showMessageDialog(this, "Student id must be a number");
        } else if (!Helpers.isNumeric(contactNo)) {
            JOptionPane.showMessageDialog(this, "Contact number must be a number");
        } else if (!isValidStudent(studentId, contactNo)) {
            JOptionPane.showMessageDialog(this, "Invalid student data", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!canStudentIssue(studentId)) {
        } else if (!isValidDate(returnDate)) {
        } else if (isStudentIssuedThisBook(studentId, callNo)) {
            JOptionPane.showMessageDialog(this, "Student issued this book before", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int bookId = isValidBook(bookName, callNo);
            switch (bookId) {
                case -1:
                    JOptionPane.showMessageDialog(this, "Invalid book data", "Error", JOptionPane.ERROR_MESSAGE);
                    break;
                case -2:
                    JOptionPane.showMessageDialog(this, "Sorry all copies of the book aren't available", "Error", JOptionPane.ERROR_MESSAGE);
                    break;
                default:
                    // adds required data to file
                    String id = String.valueOf(++issuedBooksCount);
                    String now = formatter.format(todayDate);
                    String formattedReturnDate;
                    try {
                        formattedReturnDate = formatter.format(new SimpleDateFormat("yyyy-MM-dd").parse(returnDate));
                        String issuedBookData = id + comma + callNo + comma + studentId + comma + studentName + comma + contactNo + comma + now + comma + formattedReturnDate;
                        Helpers.appendLineToFile("issuedbooks.csv", issuedBookData);
                    } catch (ParseException ex) {
                        Logger.getLogger(LibrarianIssueBookForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    // increment value of issued books and write it to file again
                    this.books[bookId][6] = String.valueOf(Integer.valueOf(books[bookId][6]) + 1);
                    Helpers.writeArrayToFile("books.csv", books);

                    // resets input fields
                    this.callNoTextField.setText("");
                    this.studentIdTextField.setText("");
                    this.contactTextField.setText("");
                    this.bookNameTextField.setText("");
                    this.returnDateTextField.setText("");
                    JOptionPane.showMessageDialog(this, "Book Issued Successfully.");
                    break;
            }
        }
    }//GEN-LAST:event_issueButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.setVisible(false);
        new LibrarianSection().setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void bookNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookNameTextFieldActionPerformed

    private void contactTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactTextFieldActionPerformed

    private void returnDateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnDateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_returnDateTextFieldActionPerformed

    private void callNoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callNoTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_callNoTextFieldActionPerformed

    private void studentIdTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentIdTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentIdTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibrarianIssueBookForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibrarianIssueBookForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibrarianIssueBookForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibrarianIssueBookForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new LibrarianIssueBookForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel bookNameLabel;
    private javax.swing.JTextField bookNameTextField;
    private javax.swing.JLabel callNoLabel;
    private javax.swing.JTextField callNoTextField;
    private javax.swing.JTextField contactTextField;
    private javax.swing.JButton issueButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel returnDateLabel;
    private javax.swing.JTextField returnDateTextField;
    private javax.swing.JLabel studentIdLabel;
    private javax.swing.JTextField studentIdTextField;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
